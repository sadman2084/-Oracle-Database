after importing drop.sql and largerelationinsertfile.sql

-SELECT dept_name FROM instructor;


-select ID, name, dept name, salary * 1.1 from instructor;

-Select name from instructor where dept_name=’Comp sci.’ and salary>70000

-select instructor.name,instructor.dept_name, department.building from instructor, department where instructor.dept_name= department.dept_name;

-select name, course id
from instructor, teaches
where instructor.ID= teaches.ID;
select instructor.name, teaches.course_id
from instructor, teaches
where instructor.ID= teaches.ID;


-select instructor.name, teaches.course_id from instructor, teaches where instructor.ID= teaches.ID and instructor.dept_name = 'Comp. Sci.';

-select instructor.name, teaches.course_id from instructor, teaches where instructor.ID= teaches.ID;

-select name as instructor_name, course_id as cor from instructor, teaches where instructor.ID= teaches.ID;

-select T.name, S.course_id
from instructor as T, teaches as S
where T.ID= S.ID;


-select distinct T.name from instructor as T, instructor as S where T.salary > S.salary and S.dept_name = 'Biology';

-select dept_name from department where building like '%Whit%';

-select name from instructor where dept_name = 'Physics' order by name;

-select *
from instructor
order by salary desc, name asc;


-select name from instructor where salary between 90000 and 100000;

-select name from instructor where salary <= 100000 and salary >= 90000;

-select instructor.name, teaches.course_id
from instructor, teaches
where instructor.ID= teaches.ID and dept name = 'Biology';


-select instructor.name, teaches.course_id
from instructor, teaches
where (instructor.ID, dept_name) = (teaches.ID, 'Biology');


-(select course_id
from section
where semester = 'Fall' and year= 2017)
union
(select course_id
from section
where semester = 'Spring' and year= 2018);


-(select course_id
from section
where semester = 'Fall' and year= 2017)
intersect
(select course_id
from section
where semester = 'Spring' and year= 2018);


-(select course_idid
from section
where semester = 'Fall' and year= 2017)
intersect all
(select course_id
from section
where semester = 'Spring' and year= 2018);


-(select course_id
from section
where semester = 'Fall' and year= 2017)
except
(select course_id
from section
where semester = 'Spring' and year= 2018);


-(select course_id
from section
where semester = 'Fall' and year= 2017)
except all
(select course_id
from section
where semester = 'Spring' and year= 2018);


-select name
from instructor
where salary is null;


-select name
from instructor
where salary > 10000 is unknown;


-select avg (salary)
from instructor
where dept_name = 'Comp. Sci.';


-SELECT avg(salary) as avg_salary from instructor
where dept_name='Comp. Sci.';


-select count(distinct ID)
from teaches
where semester = 'Spring' and year = 2018;


-SELECT dept_name, avg_salary
FROM (
    SELECT dept_name, AVG(salary) AS avg_salary
    FROM instructor
    GROUP BY dept_name
) AS subquery
where avg_salary > 42000;


-select count (*)
from course;


-select dept_name, avg (salary) as avg_salary from instructor group by dept_name;

-select instructor.dept_name, count(distinct teaches.ID) as instr_count from instructor, teaches
where instructor.ID= teaches.ID and
semester = 'Spring' and year = 2018
group by dept_name;


-select dept_name, avg (salary) as avg_salary
from instructor
group by dept_name
having avg(salary) > 42000;

-select course_id, semester, year, sec_id, avg (tot_cred)
from student, takes
where student.ID= takes.ID and year = 2017
group by course_id, semester, year, sec_id
having count(student.ID) >= 2;


-select sum(salary)
from instructor;


-(select cours_ id
from section
where semester = 'Spring' and year= 2018)


-select distinct course_id
from section
where semester = 'Fall' and year= 2017 and
course_id in (select course_id
from section
where semester = 'Spring' and year= 2018);

-select count(distinct ID) from takes where (course_id, sec_id, semester, year) in (select course_id, sec_id, semester, year from teaches where teaches.ID= '10101');

-select name from instructor where salary > some (select salary from instructor where dept_name = 'Biology');

-select name
from instructor
where salary > all (select salary
from instructor
where dept_name = 'Biology');


-select dept_name
from instructor
group by dept_name
having avg (salary) >= all (select avg (salary)
from instructor
group by dept_name)

-select course_id from section as S
where semester = 'Fall' and year= 2017 and
exists (select * from section as T
where semester = 'Spring' and year= 2018 and
S.course_id= T.course_id);


-select S.ID, S.name
from student as S
where not exists ((select course_id
from course
where dept_name = 'Biology')
except
(select T.course_id
from takes as T
where S.ID = T.ID));


-. SELECT COUNT(DISTINCT ID)
FROM takes
WHERE EXISTS (
    SELECT 1
    FROM teaches
    WHERE teaches.ID = '10101'
      AND takes.course_id = teaches.course_id
      AND takes.sec_id = teaches.sec_id
      AND takes.semester = teaches.semester
      AND takes.year = teaches.year
);



-SELECT T.course_id
FROM course AS T
WHERE T.course_id IN (
    SELECT R.course_id
    FROM section AS R
    WHERE R.year = 2017
    GROUP BY R.course_id
    HAVING COUNT(R.course_id) = 1
);



-SELECT T.course_id
FROM course AS T
WHERE 1 >= (
    SELECT COUNT(*)
    FROM section AS R
    WHERE T.course_id = R.course_id AND R.year = 2017
);



-. SELECT T.course_id
FROM course AS T
WHERE NOT EXISTS (
    SELECT R.course_id
    FROM section AS R
    WHERE T.course_id = R.course_id AND R.year = 2017
    GROUP BY R.course_id
    HAVING COUNT(*) = 1
);



-SELECT MAX(tot_salary)
FROM (
    SELECT dept_name, SUM(salary) AS tot_salary
    FROM instructor
    GROUP BY dept_name
) AS dept_total;



-WITH max_budget AS (
    SELECT MAX(budget) AS value
    FROM department
)
SELECT budget
FROM department, max_budget
WHERE department.budget = max_budget.value;



-WITH dept_total AS (
    SELECT dept_name, SUM(salary) AS value
    FROM instructor
    GROUP BY dept_name
),
dept_total_avg AS (
    SELECT AVG(value) AS avg_value
    FROM dept_total
)
SELECT dept_name
FROM dept_total, dept_total_avg
WHERE dept_total.value > dept_total_avg.avg_value;



-SELECT dept_name,
(
    SELECT COUNT(*)
    FROM instructor
    WHERE department.dept_name = instructor.dept_name
) AS num_instructors
FROM department;



-DELETE FROM instructor
WHERE dept_name = 'Finance';



-DELETE FROM instructor
WHERE salary BETWEEN 13000 AND 15000;



-. DELETE FROM instructor
WHERE dept_name IN (
    SELECT dept_name
    FROM department
    WHERE building = 'Watson'
);



-. DELETE FROM instructor
WHERE salary < (
    SELECT AVG(salary)
    FROM instructor
);



-INSERT INTO course
VALUES ('CS-437', 'Database Systems', 'Comp. Sci.', 4);



-. INSERT INTO course (course_id, title, dept_name, credits)
VALUES ('CS-497', 'Database Systems', 'Comp. Sci.', 4);


-INSERT INTO course (title, course_id, credits, dept_name)
VALUES ('Database Systems', 'CS-427', 4, 'Comp. Sci.');



-INSERT INTO instructor
SELECT ID, name, dept_name, 18000
FROM student
WHERE dept_name = 'Music' AND tot_cred > 144;



-INSERT INTO student
VALUES ('3003', 'Green', 'Finance', NULL);



- UPDATE instructor
SET salary = salary * 1.05
WHERE salary < 70000;


-UPDATE instructor
SET salary = salary * 1.05
WHERE salary < (
    SELECT AVG(salary)
    FROM instructor
);



-UPDATE instructor
SET salary = salary * 1.03
WHERE salary > 100000;
UPDATE instructor
SET salary = salary * 1.05
WHERE salary <= 100000;



-UPDATE instructor
SET salary = CASE
    WHEN salary <= 100000 THEN salary * 1.05
    ELSE salary * 1.03
END;



-UPDATE student
SET tot_cred = (
    SELECT SUM(credits)
    FROM takes, course
    WHERE student.ID = takes.ID
      AND takes.course_id = course.course_id
      AND takes.grade <> 'F'
      AND takes.grade IS NOT NULL
);




-SELECT CASE
    WHEN SUM(credits) IS NOT NULL THEN SUM(credits)
    ELSE 0
END;
